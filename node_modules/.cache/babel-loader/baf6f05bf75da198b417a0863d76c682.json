{"ast":null,"code":"var _jsxFileName = \"/home/aidana/Game/game/src/components/chibi/Chibi.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useState, useRef, useEffect } from 'react';\nimport cat from './astro.png';\nimport { animated, useSpring } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chibi = props => {\n  _s();\n\n  const {\n    stairsRef,\n    tasksDone,\n    daysCount,\n    savedDay,\n    player\n  } = props;\n  const catRef = useRef(null);\n  const [catRect, setCatRect] = useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    const div = stairsRef.current;\n    const rect = div.getBoundingClientRect();\n    setCatRect({\n      x: rect.x,\n      y: rect.y,\n      z: rect.z,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    });\n  }, []);\n  const {\n    width,\n    height\n  } = catRect;\n  let days = savedDay;\n\n  if (tasksDone) {\n    days = daysCount - 1;\n  } else {\n    days = savedDay - 1;\n  }\n\n  const springProps = useSpring({\n    from: {\n      bottom: height * days + 'px',\n      left: width * days + 'px',\n      width: '300px',\n      height: '200px',\n      position: 'relative'\n    },\n    to: async next => {\n      await next({\n        bottom: height * days + 150 + 'px',\n        left: width * days + 'px'\n      });\n      await next({\n        bottom: height * days + 10 + 'px',\n        left: width * days + width / 2 + 'px'\n      });\n    },\n    config: {\n      duration: 500\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.img, {\n      ref: catRef,\n      src: player ? player : cat,\n      alt: 'cat',\n      style: springProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chibi, \"2p7DQ4QkGUCQmJ9QgBHGSKBL2Z4=\", false, function () {\n  return [useSpring];\n});\n\n_c = Chibi;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chibi\");","map":{"version":3,"names":["React","Suspense","useState","useRef","useEffect","cat","animated","useSpring","Chibi","props","stairsRef","tasksDone","daysCount","savedDay","player","catRef","catRect","setCatRect","x","y","width","height","div","current","rect","getBoundingClientRect","z","left","days","springProps","from","bottom","position","to","next","config","duration"],"sources":["/home/aidana/Game/game/src/components/chibi/Chibi.jsx"],"sourcesContent":["import React, {Suspense, useState, useRef, useEffect } from 'react'\nimport cat from './astro.png'\nimport { animated, useSpring } from \"react-spring\";\n\nexport const Chibi = (props) => {\n  const {stairsRef,tasksDone, daysCount,savedDay,player} = props\n\n  const catRef = useRef(null);\n  const [catRect, setCatRect] = useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  })\n  useEffect(() => {\n    const div = stairsRef.current;\n    const rect = div.getBoundingClientRect();\n    setCatRect({\n      x: rect.x,\n      y: rect.y,\n      z: rect.z,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    })\n  }, [])\n  const { width, height } = catRect\n  let days=savedDay\n\n  if(tasksDone){\n    days=daysCount -1                                                                                                                                \n  }else{\n    days=savedDay-1\n  }\n  \n  \n  const springProps = useSpring({\n    from: { bottom: height * days + 'px', left: width * days + 'px', width: '300px', height: '200px', position: 'relative' },\n    to: async next => {\n      await next({ bottom: height * days +150 + 'px', left: width * days + 'px' })\n      await next({ bottom: height * days + 10 + 'px', left: width * days + width / 2 + 'px' })\n    },\n    config: { duration: 500 }\n  });\n\n  return (\n    <>\n      <animated.img\n        ref={catRef}\n        src={player?player:cat}\n        alt={'cat'}\n        style={\n          springProps\n        } />\n    </>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,cAApC;;;AAEA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAM;IAACC,SAAD;IAAWC,SAAX;IAAsBC,SAAtB;IAAgCC,QAAhC;IAAyCC;EAAzC,IAAmDL,KAAzD;EAEA,MAAMM,MAAM,GAAGZ,MAAM,CAAC,IAAD,CAArB;EACA,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC;IACrCgB,CAAC,EAAE,CADkC;IAErCC,CAAC,EAAE,CAFkC;IAGrCC,KAAK,EAAE,CAH8B;IAIrCC,MAAM,EAAE;EAJ6B,CAAD,CAAtC;EAMAjB,SAAS,CAAC,MAAM;IACd,MAAMkB,GAAG,GAAGZ,SAAS,CAACa,OAAtB;IACA,MAAMC,IAAI,GAAGF,GAAG,CAACG,qBAAJ,EAAb;IACAR,UAAU,CAAC;MACTC,CAAC,EAAEM,IAAI,CAACN,CADC;MAETC,CAAC,EAAEK,IAAI,CAACL,CAFC;MAGTO,CAAC,EAAEF,IAAI,CAACE,CAHC;MAITC,IAAI,EAAEH,IAAI,CAACG,IAJF;MAKTP,KAAK,EAAEI,IAAI,CAACJ,KALH;MAMTC,MAAM,EAAEG,IAAI,CAACH;IANJ,CAAD,CAAV;EAQD,CAXQ,EAWN,EAXM,CAAT;EAYA,MAAM;IAAED,KAAF;IAASC;EAAT,IAAoBL,OAA1B;EACA,IAAIY,IAAI,GAACf,QAAT;;EAEA,IAAGF,SAAH,EAAa;IACXiB,IAAI,GAAChB,SAAS,GAAE,CAAhB;EACD,CAFD,MAEK;IACHgB,IAAI,GAACf,QAAQ,GAAC,CAAd;EACD;;EAGD,MAAMgB,WAAW,GAAGtB,SAAS,CAAC;IAC5BuB,IAAI,EAAE;MAAEC,MAAM,EAAEV,MAAM,GAAGO,IAAT,GAAgB,IAA1B;MAAgCD,IAAI,EAAEP,KAAK,GAAGQ,IAAR,GAAe,IAArD;MAA2DR,KAAK,EAAE,OAAlE;MAA2EC,MAAM,EAAE,OAAnF;MAA4FW,QAAQ,EAAE;IAAtG,CADsB;IAE5BC,EAAE,EAAE,MAAMC,IAAN,IAAc;MAChB,MAAMA,IAAI,CAAC;QAAEH,MAAM,EAAEV,MAAM,GAAGO,IAAT,GAAe,GAAf,GAAqB,IAA/B;QAAqCD,IAAI,EAAEP,KAAK,GAAGQ,IAAR,GAAe;MAA1D,CAAD,CAAV;MACA,MAAMM,IAAI,CAAC;QAAEH,MAAM,EAAEV,MAAM,GAAGO,IAAT,GAAgB,EAAhB,GAAqB,IAA/B;QAAqCD,IAAI,EAAEP,KAAK,GAAGQ,IAAR,GAAeR,KAAK,GAAG,CAAvB,GAA2B;MAAtE,CAAD,CAAV;IACD,CAL2B;IAM5Be,MAAM,EAAE;MAAEC,QAAQ,EAAE;IAAZ;EANoB,CAAD,CAA7B;EASA,oBACE;IAAA,uBACE,QAAC,QAAD,CAAU,GAAV;MACE,GAAG,EAAErB,MADP;MAEE,GAAG,EAAED,MAAM,GAACA,MAAD,GAAQT,GAFrB;MAGE,GAAG,EAAE,KAHP;MAIE,KAAK,EACHwB;IALJ;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAWD,CApDM;;GAAMrB,K;UAgCSD,S;;;KAhCTC,K"},"metadata":{},"sourceType":"module"}